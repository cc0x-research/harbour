{
  "address": "0xF4141483d26a36D6D977303B598b855Cf53188Bd",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "safe",
          "type": "address"
        }
      ],
      "name": "getBasicConfiguration",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "owners",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "threshold",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "fallbackHandler",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "modules",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "guard",
              "type": "address"
            }
          ],
          "internalType": "struct SafeConfiguration",
          "name": "config",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "safe",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxIterations",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pageSize",
          "type": "uint256"
        }
      ],
      "name": "getFullConfiguration",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "owners",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "threshold",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "fallbackHandler",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "modules",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "guard",
              "type": "address"
            }
          ],
          "internalType": "struct SafeConfiguration",
          "name": "fullConfig",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "nextCursor",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "safe",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "start",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pageSize",
          "type": "uint256"
        }
      ],
      "name": "getModulesPaginated",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "modulePage",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "nextCursor",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7404add7dba29dcbe259a21101744afcfae3119b08c71b5bbf1be48b0dac6b18",
  "receipt": {
    "to": "0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7",
    "from": "0x02270bd144e70cE6963bA02F575776A16184E1E6",
    "contractAddress": null,
    "transactionIndex": 58,
    "gasUsed": "749013",
    "logsBloom": "0x
    "blockHash": "0xf03f5de1d1e586fc0eab794aee87edb9e7a100cfdc0c47db9f8e5af36771e174",
    "transactionHash": "0x7404add7dba29dcbe259a21101744afcfae3119b08c71b5bbf1be48b0dac6b18",
    "logs": [],
    "blockNumber": 8270036,
    "cumulativeGasUsed": "7862785",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "25465c993b4adbcef6ca93e38d5bb680",
  "metadata": "{\"compiler\":{\"version\":\"0.8.29+commit.ab55807c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"}],\"name\":\"getBasicConfiguration\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fallbackHandler\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"modules\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"}],\"internalType\":\"struct SafeConfiguration\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxIterations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"getFullConfiguration\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fallbackHandler\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"modules\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"}],\"internalType\":\"struct SafeConfiguration\",\"name\":\"fullConfig\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"nextCursor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"start\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"getModulesPaginated\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"modulePage\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"nextCursor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Provides gas-optimized methods for reading storage and modules with pagination.\",\"kind\":\"dev\",\"methods\":{\"getBasicConfiguration(address)\":{\"params\":{\"safe\":\"The address of the Safe contract.\"},\"returns\":{\"config\":\"The basic SafeConfiguration with owners, threshold, fallbackHandler, nonce, guard, and an empty modules array.\"}},\"getFullConfiguration(address,uint256,uint256)\":{\"params\":{\"maxIterations\":\"Maximum number of pagination loops.\",\"pageSize\":\"Number of modules to fetch per iteration.\",\"safe\":\"The address of the Safe contract.\"},\"returns\":{\"fullConfig\":\"Complete SafeConfiguration with modules populated.\",\"nextCursor\":\"Cursor for additional pagination (address(0) if none left).\"}},\"getModulesPaginated(address,address,uint256)\":{\"params\":{\"pageSize\":\"The maximum number of modules to retrieve.\",\"safe\":\"The address of the Safe contract.\",\"start\":\"The starting module address (use SENTINEL_MODULES for first page).\"},\"returns\":{\"modulePage\":\"List of module addresses in the retrieved page.\",\"nextCursor\":\"Address cursor for the next page (address(0) if end reached).\"}}},\"stateVariables\":{\"FALLBACK_HANDLER_STORAGE_SLOT\":{\"details\":\"Storage slot for fallback handler (keccak256(\\\"fallback_manager.handler.address\\\")).\"},\"GUARD_STORAGE_SLOT\":{\"details\":\"Storage slot for guard contract (keccak256(\\\"guard_manager.guard.address\\\")).\"},\"SENTINEL_MODULES\":{\"details\":\"Sentinel address for module linked-list iteration.\"}},\"title\":\"Safe Configuration Fetcher\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getBasicConfiguration(address)\":{\"notice\":\"Returns the basic Safe configuration (excluding modules, modules array will be empty).\"},\"getFullConfiguration(address,uint256,uint256)\":{\"notice\":\"Returns the full Safe configuration, including all modules up to the specified cap.\"},\"getModulesPaginated(address,address,uint256)\":{\"notice\":\"Returns a page of Safe modules and the next cursor for pagination.\"}},\"notice\":\"A utility contract to fetch basic and full configurations of a Safe.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/utils/SafeConfigurationFetcher.sol\":\"SafeConfigurationFetcher\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"src/utils/SafeConfigurationFetcher.sol\":{\"content\":\"// SPDX-License-Identifier: GNU GPLv3\\npragma solidity ^0.8.29;\\n\\n/// @notice Data structure representing a Safe configuration.\\n/// @param owners The list of Safe owners.\\n/// @param threshold Required confirmations for transactions.\\n/// @param fallbackHandler Fallback handler contract address.\\n/// @param nonce Current nonce of the Safe.\\n/// @param modules Enabled Safe modules.\\n/// @param guard Guard contract address.\\nstruct SafeConfiguration {\\n    address[] owners;\\n    uint256 threshold;\\n    address fallbackHandler;\\n    uint256 nonce;\\n    address[] modules;\\n    address guard;\\n}\\n\\ninterface ISafe {\\n    function getOwners() external view returns (address[] memory);\\n    function getThreshold() external view returns (uint256);\\n    function getStorageAt(\\n        uint256 offset,\\n        uint256 length\\n    ) external view returns (bytes memory);\\n    function nonce() external view returns (uint256);\\n    function getModulesPaginated(\\n        address start,\\n        uint256 pageSize\\n    ) external view returns (address[] memory array, address next);\\n\\n    function getModules() external view returns (address[] memory);\\n}\\n\\n/// @title Safe Configuration Fetcher\\n/// @notice A utility contract to fetch basic and full configurations of a Safe.\\n/// @dev Provides gas-optimized methods for reading storage and modules with pagination.\\ncontract SafeConfigurationFetcher {\\n    /// @dev Storage slot for fallback handler (keccak256(\\\"fallback_manager.handler.address\\\")).\\n    bytes32 internal constant FALLBACK_HANDLER_STORAGE_SLOT =\\n        0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5;\\n\\n    /// @dev Storage slot for guard contract (keccak256(\\\"guard_manager.guard.address\\\")).\\n    bytes32 internal constant GUARD_STORAGE_SLOT =\\n        0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;\\n\\n    /// @dev Sentinel address for module linked-list iteration.\\n    address internal constant SENTINEL_MODULES = address(0x1);\\n\\n    /// @dev Internal helper to read an address from a specific storage slot.\\n    /// @param safeContract The Safe contract to query.\\n    /// @param slot The storage slot to read.\\n    /// @return addr The address value decoded from the slot.\\n    function _addressFromStorage(\\n        ISafe safeContract,\\n        bytes32 slot\\n    ) internal view returns (address addr) {\\n        addr = abi.decode(\\n            safeContract.getStorageAt(uint256(slot), 1),\\n            (address)\\n        );\\n    }\\n\\n    /// @dev Internal helper to fetch the basic configuration fields from the Safe.\\n    /// @param safeContract The Safe contract instance.\\n    /// @return config SafeConfiguration struct with owners, threshold, fallbackHandler, nonce, and guard populated.\\n    function _fetchBasicConfig(\\n        ISafe safeContract\\n    ) private view returns (SafeConfiguration memory config) {\\n        config.owners = safeContract.getOwners();\\n        config.threshold = safeContract.getThreshold();\\n        config.fallbackHandler = _addressFromStorage(\\n            safeContract,\\n            FALLBACK_HANDLER_STORAGE_SLOT\\n        );\\n        config.nonce = safeContract.nonce();\\n        config.guard = _addressFromStorage(safeContract, GUARD_STORAGE_SLOT);\\n    }\\n\\n    /// @notice Returns the basic Safe configuration (excluding modules, modules array will be empty).\\n    /// @param safe The address of the Safe contract.\\n    /// @return config The basic SafeConfiguration with owners, threshold, fallbackHandler, nonce, guard, and an empty modules array.\\n    function getBasicConfiguration(\\n        address safe\\n    ) external view returns (SafeConfiguration memory config) {\\n        config = _fetchBasicConfig(ISafe(safe));\\n    }\\n\\n    /// @notice Returns a page of Safe modules and the next cursor for pagination.\\n    /// @param safe The address of the Safe contract.\\n    /// @param start The starting module address (use SENTINEL_MODULES for first page).\\n    /// @param pageSize The maximum number of modules to retrieve.\\n    /// @return modulePage List of module addresses in the retrieved page.\\n    /// @return nextCursor Address cursor for the next page (address(0) if end reached).\\n    function getModulesPaginated(\\n        address safe,\\n        address start,\\n        uint256 pageSize\\n    ) external view returns (address[] memory modulePage, address nextCursor) {\\n        (modulePage, nextCursor) = ISafe(safe).getModulesPaginated(\\n            start,\\n            pageSize\\n        );\\n    }\\n\\n    /// @notice Returns the full Safe configuration, including all modules up to the specified cap.\\n    /// @param safe The address of the Safe contract.\\n    /// @param maxIterations Maximum number of pagination loops.\\n    /// @param pageSize Number of modules to fetch per iteration.\\n    /// @return fullConfig Complete SafeConfiguration with modules populated.\\n    /// @return nextCursor Cursor for additional pagination (address(0) if none left).\\n    function getFullConfiguration(\\n        address safe,\\n        uint256 maxIterations,\\n        uint256 pageSize\\n    )\\n        external\\n        view\\n        returns (SafeConfiguration memory fullConfig, address nextCursor)\\n    {\\n        ISafe safeContract = ISafe(safe);\\n        fullConfig = _fetchBasicConfig(safeContract);\\n\\n        uint256 bufferSize = maxIterations * pageSize;\\n        address[] memory temp = new address[](bufferSize);\\n        uint256 count = 0;\\n        address cursor = SENTINEL_MODULES;\\n\\n        for (\\n            uint256 i = 0;\\n            i < maxIterations &&\\n                (cursor != address(0) && cursor != SENTINEL_MODULES);\\n            i++\\n        ) {\\n            (address[] memory page, address next) = safeContract\\n                .getModulesPaginated(cursor, pageSize);\\n            for (uint256 j = 0; j < page.length; j++) {\\n                temp[count++] = page[j];\\n            }\\n            cursor = next;\\n        }\\n\\n        address[] memory modulesArr = new address[](count);\\n        for (uint256 k = 0; k < count; k++) {\\n            modulesArr[k] = temp[k];\\n        }\\n        fullConfig.modules = modulesArr;\\n        nextCursor = cursor;\\n    }\\n}\\n\",\"keccak256\":\"0xd8d4e8e66a6848e562058ffbf518bbf0eb03a82f3ebb2fd3a15d6fb553534bc3\",\"license\":\"GNU GPLv3\"}},\"version\":1}",
  "bytecode": "0x60808060405234601557610c9d908161001b8239f35b600080fdfe608080604052600436101561001357600080fd5b60003560e01c9081632fe699bd146103535750806394de1ba5146102da5763aa83207f1461004057600080fd5b346102d55760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102d5576100776104a2565b60243573ffffffffffffffffffffffffffffffffffffffff6044359261009b6106c1565b50166100a6816107c4565b928083028381048214841517156102a6576100c390949394610705565b9060009360019585925b81841080610272575b156101e5576040517fcc2f845200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff98909816600489015260248801819052959694959394936000856044818a5afa9687156101d95760009586986101b0575b5060005b8651811015610192578073ffffffffffffffffffffffffffffffffffffffff6101766001938a610781565b511661018b6101848d610754565b9c8b610781565b520161014b565b50939291966101a391955092610754565b92949396959091966100cd565b9097506101cf91953d8091833e6101c7818361057a565b810190610688565b9490949638610147565b6040513d6000823e3d90fd5b848389896101f281610705565b9060005b81811061023d5750506102329350608083015273ffffffffffffffffffffffffffffffffffffffff60405193849360408552604085019061050f565b911660208301520390f35b8073ffffffffffffffffffffffffffffffffffffffff61025f60019389610781565b511661026b8286610781565b52016101f6565b5073ffffffffffffffffffffffffffffffffffffffff8816801515908161029a575b506100d6565b60019150141538610294565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b346102d55760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102d55761034f61033b73ffffffffffffffffffffffffffffffffffffffff61032c6104a2565b6103346106c1565b50166107c4565b60405191829160208352602083019061050f565b0390f35b346102d55760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102d55761038a6104a2565b60243573ffffffffffffffffffffffffffffffffffffffff811681036102d5577fcc2f845200000000000000000000000000000000000000000000000000000000835273ffffffffffffffffffffffffffffffffffffffff908116600484015260448035602485015260009284928391165afa9081156101d957600090600092610484575b50604051906040820160408352815180915260206060840192019060005b8181106104585750505073ffffffffffffffffffffffffffffffffffffffff82931660208301520390f35b825173ffffffffffffffffffffffffffffffffffffffff1684526020938401939092019160010161042d565b905061049b91503d806000833e6101c7818361057a565b908261040f565b6004359073ffffffffffffffffffffffffffffffffffffffff821682036102d557565b906020808351928381520192019060005b8181106104e35750505090565b825173ffffffffffffffffffffffffffffffffffffffff168452602093840193909201916001016104d6565b9060a073ffffffffffffffffffffffffffffffffffffffff8161057061053e865160c0875260c08701906104c5565b6020870151602087015283604088015116604087015260608701516060870152608087015186820360808801526104c5565b9401511691015290565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176105bb57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff81116105bb5760051b60200190565b519073ffffffffffffffffffffffffffffffffffffffff821682036102d557565b9080601f830112156102d557815161063a816105ea565b92610648604051948561057a565b81845260208085019260051b8201019283116102d557602001905b8282106106705750505090565b6020809161067d84610602565b815201910190610663565b91906040838203126102d55782519067ffffffffffffffff82116102d5576106b76020916106be938601610623565b9301610602565b90565b6040519060c0820182811067ffffffffffffffff8211176105bb57604052600060a08360608152826020820152826040820152826060820152606060808201520152565b9061070f826105ea565b61071c604051918261057a565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061074a82946105ea565b0190602036910137565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146102a65760010190565b80518210156107955760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9073ffffffffffffffffffffffffffffffffffffffff6107e26106c1565b92166040517fa0e67e2b000000000000000000000000000000000000000000000000000000008152600081600481855afa9081156101d957600091610c26575b5083526040517fe75235b8000000000000000000000000000000000000000000000000000000008152602081600481855afa9081156101d957600091610bf4575b50602084015260006040517f5624b25b0000000000000000000000000000000000000000000000000000000081527f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d56004820152600160248201528181604481865afa908115610af4578291610b31575b506020818051810103126109f857602001519073ffffffffffffffffffffffffffffffffffffffff82168092036109f5575060408401526040517faffed0e0000000000000000000000000000000000000000000000000000000008152602081600481855afa9081156101d957600091610aff575b506060840152604460008092604051928380927f5624b25b0000000000000000000000000000000000000000000000000000000082527f4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c86004830152600160248301525afa908115610af45782916109fc575b506020818051810103126109f857602001519073ffffffffffffffffffffffffffffffffffffffff82168092036109f5575060a0830152565b80fd5b5080fd5b90503d8083833e610a0d818361057a565b810190602081830312610af05780519067ffffffffffffffff8211610abf570181601f82011215610af05780519067ffffffffffffffff8211610ac35760405192610a8060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f860116018561057a565b82845260208383010111610abf57908391825b828110610aa8575050820160200152386109bc565b602082820181015186830182015286945001610a93565b8380fd5b6024847f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b8280fd5b6040513d84823e3d90fd5b90506020813d602011610b29575b81610b1a6020938361057a565b810103126102d5575138610949565b3d9150610b0d565b90503d8083833e610b42818361057a565b810190602081830312610af05780519067ffffffffffffffff8211610abf570181601f82011215610af05780519067ffffffffffffffff8211610ac35760405192610bb560207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f860116018561057a565b82845260208383010111610abf57908391825b828110610bdd575050820160200152386108d4565b602082820181015186830182015286945001610bc8565b90506020813d602011610c1e575b81610c0f6020938361057a565b810103126102d5575138610863565b3d9150610c02565b903d8082843e610c36818461057a565b8201916020818403126109f85780519167ffffffffffffffff83116109f55750610c61929101610623565b3861082256fea26469706673582212205f5b5add23502356c912bf1dbfdbbc5abefc1ffa655ae525eb9a60c744aa007164736f6c634300081d0033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c9081632fe699bd146103535750806394de1ba5146102da5763aa83207f1461004057600080fd5b346102d55760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102d5576100776104a2565b60243573ffffffffffffffffffffffffffffffffffffffff6044359261009b6106c1565b50166100a6816107c4565b928083028381048214841517156102a6576100c390949394610705565b9060009360019585925b81841080610272575b156101e5576040517fcc2f845200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff98909816600489015260248801819052959694959394936000856044818a5afa9687156101d95760009586986101b0575b5060005b8651811015610192578073ffffffffffffffffffffffffffffffffffffffff6101766001938a610781565b511661018b6101848d610754565b9c8b610781565b520161014b565b50939291966101a391955092610754565b92949396959091966100cd565b9097506101cf91953d8091833e6101c7818361057a565b810190610688565b9490949638610147565b6040513d6000823e3d90fd5b848389896101f281610705565b9060005b81811061023d5750506102329350608083015273ffffffffffffffffffffffffffffffffffffffff60405193849360408552604085019061050f565b911660208301520390f35b8073ffffffffffffffffffffffffffffffffffffffff61025f60019389610781565b511661026b8286610781565b52016101f6565b5073ffffffffffffffffffffffffffffffffffffffff8816801515908161029a575b506100d6565b60019150141538610294565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b346102d55760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102d55761034f61033b73ffffffffffffffffffffffffffffffffffffffff61032c6104a2565b6103346106c1565b50166107c4565b60405191829160208352602083019061050f565b0390f35b346102d55760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102d55761038a6104a2565b60243573ffffffffffffffffffffffffffffffffffffffff811681036102d5577fcc2f845200000000000000000000000000000000000000000000000000000000835273ffffffffffffffffffffffffffffffffffffffff908116600484015260448035602485015260009284928391165afa9081156101d957600090600092610484575b50604051906040820160408352815180915260206060840192019060005b8181106104585750505073ffffffffffffffffffffffffffffffffffffffff82931660208301520390f35b825173ffffffffffffffffffffffffffffffffffffffff1684526020938401939092019160010161042d565b905061049b91503d806000833e6101c7818361057a565b908261040f565b6004359073ffffffffffffffffffffffffffffffffffffffff821682036102d557565b906020808351928381520192019060005b8181106104e35750505090565b825173ffffffffffffffffffffffffffffffffffffffff168452602093840193909201916001016104d6565b9060a073ffffffffffffffffffffffffffffffffffffffff8161057061053e865160c0875260c08701906104c5565b6020870151602087015283604088015116604087015260608701516060870152608087015186820360808801526104c5565b9401511691015290565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176105bb57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff81116105bb5760051b60200190565b519073ffffffffffffffffffffffffffffffffffffffff821682036102d557565b9080601f830112156102d557815161063a816105ea565b92610648604051948561057a565b81845260208085019260051b8201019283116102d557602001905b8282106106705750505090565b6020809161067d84610602565b815201910190610663565b91906040838203126102d55782519067ffffffffffffffff82116102d5576106b76020916106be938601610623565b9301610602565b90565b6040519060c0820182811067ffffffffffffffff8211176105bb57604052600060a08360608152826020820152826040820152826060820152606060808201520152565b9061070f826105ea565b61071c604051918261057a565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061074a82946105ea565b0190602036910137565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146102a65760010190565b80518210156107955760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9073ffffffffffffffffffffffffffffffffffffffff6107e26106c1565b92166040517fa0e67e2b000000000000000000000000000000000000000000000000000000008152600081600481855afa9081156101d957600091610c26575b5083526040517fe75235b8000000000000000000000000000000000000000000000000000000008152602081600481855afa9081156101d957600091610bf4575b50602084015260006040517f5624b25b0000000000000000000000000000000000000000000000000000000081527f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d56004820152600160248201528181604481865afa908115610af4578291610b31575b506020818051810103126109f857602001519073ffffffffffffffffffffffffffffffffffffffff82168092036109f5575060408401526040517faffed0e0000000000000000000000000000000000000000000000000000000008152602081600481855afa9081156101d957600091610aff575b506060840152604460008092604051928380927f5624b25b0000000000000000000000000000000000000000000000000000000082527f4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c86004830152600160248301525afa908115610af45782916109fc575b506020818051810103126109f857602001519073ffffffffffffffffffffffffffffffffffffffff82168092036109f5575060a0830152565b80fd5b5080fd5b90503d8083833e610a0d818361057a565b810190602081830312610af05780519067ffffffffffffffff8211610abf570181601f82011215610af05780519067ffffffffffffffff8211610ac35760405192610a8060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f860116018561057a565b82845260208383010111610abf57908391825b828110610aa8575050820160200152386109bc565b602082820181015186830182015286945001610a93565b8380fd5b6024847f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b8280fd5b6040513d84823e3d90fd5b90506020813d602011610b29575b81610b1a6020938361057a565b810103126102d5575138610949565b3d9150610b0d565b90503d8083833e610b42818361057a565b810190602081830312610af05780519067ffffffffffffffff8211610abf570181601f82011215610af05780519067ffffffffffffffff8211610ac35760405192610bb560207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f860116018561057a565b82845260208383010111610abf57908391825b828110610bdd575050820160200152386108d4565b602082820181015186830182015286945001610bc8565b90506020813d602011610c1e575b81610c0f6020938361057a565b810103126102d5575138610863565b3d9150610c02565b903d8082843e610c36818461057a565b8201916020818403126109f85780519167ffffffffffffffff83116109f55750610c61929101610623565b3861082256fea26469706673582212205f5b5add23502356c912bf1dbfdbbc5abefc1ffa655ae525eb9a60c744aa007164736f6c634300081d0033",
  "devdoc": {
    "details": "Provides gas-optimized methods for reading storage and modules with pagination.",
    "kind": "dev",
    "methods": {
      "getBasicConfiguration(address)": {
        "params": {
          "safe": "The address of the Safe contract."
        },
        "returns": {
          "config": "The basic SafeConfiguration with owners, threshold, fallbackHandler, nonce, guard, and an empty modules array."
        }
      },
      "getFullConfiguration(address,uint256,uint256)": {
        "params": {
          "maxIterations": "Maximum number of pagination loops.",
          "pageSize": "Number of modules to fetch per iteration.",
          "safe": "The address of the Safe contract."
        },
        "returns": {
          "fullConfig": "Complete SafeConfiguration with modules populated.",
          "nextCursor": "Cursor for additional pagination (address(0) if none left)."
        }
      },
      "getModulesPaginated(address,address,uint256)": {
        "params": {
          "pageSize": "The maximum number of modules to retrieve.",
          "safe": "The address of the Safe contract.",
          "start": "The starting module address (use SENTINEL_MODULES for first page)."
        },
        "returns": {
          "modulePage": "List of module addresses in the retrieved page.",
          "nextCursor": "Address cursor for the next page (address(0) if end reached)."
        }
      }
    },
    "stateVariables": {
      "FALLBACK_HANDLER_STORAGE_SLOT": {
        "details": "Storage slot for fallback handler (keccak256(\"fallback_manager.handler.address\"))."
      },
      "GUARD_STORAGE_SLOT": {
        "details": "Storage slot for guard contract (keccak256(\"guard_manager.guard.address\"))."
      },
      "SENTINEL_MODULES": {
        "details": "Sentinel address for module linked-list iteration."
      }
    },
    "title": "Safe Configuration Fetcher",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getBasicConfiguration(address)": {
        "notice": "Returns the basic Safe configuration (excluding modules, modules array will be empty)."
      },
      "getFullConfiguration(address,uint256,uint256)": {
        "notice": "Returns the full Safe configuration, including all modules up to the specified cap."
      },
      "getModulesPaginated(address,address,uint256)": {
        "notice": "Returns a page of Safe modules and the next cursor for pagination."
      }
    },
    "notice": "A utility contract to fetch basic and full configurations of a Safe.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}