{
  "address": "0xF4cAb78fe3cC1C5024F1a74FcD36bF416dFFB558",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "safe",
          "type": "address"
        }
      ],
      "name": "getBasicConfiguration",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "singleton",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "owners",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "threshold",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "fallbackHandler",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "modules",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "guard",
              "type": "address"
            }
          ],
          "internalType": "struct SafeConfiguration",
          "name": "config",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "safe",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxIterations",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pageSize",
          "type": "uint256"
        }
      ],
      "name": "getFullConfiguration",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "singleton",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "owners",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "threshold",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "fallbackHandler",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "modules",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "guard",
              "type": "address"
            }
          ],
          "internalType": "struct SafeConfiguration",
          "name": "fullConfig",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "nextCursor",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "safes",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "maxIterations",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pageSize",
          "type": "uint256"
        }
      ],
      "name": "getFullConfigurationMany",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "singleton",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "owners",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "threshold",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "fallbackHandler",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "modules",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "guard",
              "type": "address"
            }
          ],
          "internalType": "struct SafeConfiguration[]",
          "name": "fullConfigs",
          "type": "tuple[]"
        },
        {
          "internalType": "address[]",
          "name": "nextCursors",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "safe",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "start",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pageSize",
          "type": "uint256"
        }
      ],
      "name": "getModulesPaginated",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "modulePage",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "nextCursor",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2f69246ecdb1d4ec3c4c079cdde069cc17e0e4cc2dc23c4fbcfbef4d2432193a",
  "receipt": {
    "to": "0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7",
    "from": "0x02270bd144e70cE6963bA02F575776A16184E1E6",
    "contractAddress": null,
    "transactionIndex": 23,
    "gasUsed": "930176",
    "logsBloom": "0x
    "blockHash": "0x6bafc1a3037ca721635adeaa484502b609a0d4ededd1a68a8595f9d4ac055f4c",
    "transactionHash": "0x2f69246ecdb1d4ec3c4c079cdde069cc17e0e4cc2dc23c4fbcfbef4d2432193a",
    "logs": [],
    "blockNumber": 40024371,
    "cumulativeGasUsed": "14855173",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "30393fae4f4efd924fbc45800a379ae8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.29+commit.ab55807c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"}],\"name\":\"getBasicConfiguration\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"singleton\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fallbackHandler\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"modules\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"}],\"internalType\":\"struct SafeConfiguration\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxIterations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"getFullConfiguration\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"singleton\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fallbackHandler\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"modules\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"}],\"internalType\":\"struct SafeConfiguration\",\"name\":\"fullConfig\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"nextCursor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"safes\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"maxIterations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"getFullConfigurationMany\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"singleton\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fallbackHandler\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"modules\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"}],\"internalType\":\"struct SafeConfiguration[]\",\"name\":\"fullConfigs\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"nextCursors\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"start\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"getModulesPaginated\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"modulePage\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"nextCursor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Provides gas-optimized methods for reading storage and modules with pagination.\",\"kind\":\"dev\",\"methods\":{\"getBasicConfiguration(address)\":{\"params\":{\"safe\":\"The address of the Safe contract.\"},\"returns\":{\"config\":\"The basic SafeConfiguration with owners, threshold, fallbackHandler, nonce, guard, and an empty modules array.\"}},\"getFullConfiguration(address,uint256,uint256)\":{\"params\":{\"maxIterations\":\"Maximum number of pagination loops.\",\"pageSize\":\"Number of modules to fetch per iteration.\",\"safe\":\"The address of the Safe contract.\"},\"returns\":{\"fullConfig\":\"Complete SafeConfiguration with modules populated.\",\"nextCursor\":\"Cursor for additional pagination (address(0) if none left).\"}},\"getFullConfigurationMany(address[],uint256,uint256)\":{\"params\":{\"maxIterations\":\"Maximum number of pagination loops for each Safe.\",\"pageSize\":\"Number of modules to fetch per iteration for each Safe.\",\"safes\":\"Array of Safe contract addresses to query.\"},\"returns\":{\"fullConfigs\":\"Array of complete SafeConfiguration structs, one for each Safe address.\",\"nextCursors\":\"Array of cursors for additional pagination (address(0) if none left).\"}},\"getModulesPaginated(address,address,uint256)\":{\"params\":{\"pageSize\":\"The maximum number of modules to retrieve.\",\"safe\":\"The address of the Safe contract.\",\"start\":\"The starting module address (use SENTINEL_MODULES for first page).\"},\"returns\":{\"modulePage\":\"List of module addresses in the retrieved page.\",\"nextCursor\":\"Address cursor for the next page (address(0) if end reached).\"}}},\"stateVariables\":{\"FALLBACK_HANDLER_STORAGE_SLOT\":{\"details\":\"Storage slot for fallback handler (keccak256(\\\"fallback_manager.handler.address\\\")).\"},\"GUARD_STORAGE_SLOT\":{\"details\":\"Storage slot for guard contract (keccak256(\\\"guard_manager.guard.address\\\")).\"},\"SENTINEL_MODULES\":{\"details\":\"Sentinel address for module linked-list iteration.\"},\"SINGLETON_STORAGE_SLOT\":{\"details\":\"Storage slot for singleton\"}},\"title\":\"Safe Configuration Fetcher\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getBasicConfiguration(address)\":{\"notice\":\"Returns the basic Safe configuration (excluding modules, modules array will be empty).\"},\"getFullConfiguration(address,uint256,uint256)\":{\"notice\":\"Returns the full Safe configuration, including all modules up to the specified cap.\"},\"getFullConfigurationMany(address[],uint256,uint256)\":{\"notice\":\"Returns full configurations for multiple Safe contracts in a single call.\"},\"getModulesPaginated(address,address,uint256)\":{\"notice\":\"Returns a page of Safe modules and the next cursor for pagination.\"}},\"notice\":\"A utility contract to fetch basic and full configurations of a Safe.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/utils/SafeConfigurationFetcher.sol\":\"SafeConfigurationFetcher\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"src/utils/SafeConfigurationFetcher.sol\":{\"content\":\"// SPDX-License-Identifier: GNU GPLv3\\npragma solidity ^0.8.29;\\n\\n/// @notice Data structure representing a Safe configuration.\\n/// @param owners The list of Safe owners.\\n/// @param threshold Required confirmations for transactions.\\n/// @param fallbackHandler Fallback handler contract address.\\n/// @param nonce Current nonce of the Safe.\\n/// @param modules Enabled Safe modules.\\n/// @param guard Guard contract address.\\nstruct SafeConfiguration {\\n    address singleton;\\n    address[] owners;\\n    uint256 threshold;\\n    address fallbackHandler;\\n    uint256 nonce;\\n    address[] modules;\\n    address guard;\\n}\\n\\ninterface ISafe {\\n    function getOwners() external view returns (address[] memory);\\n\\n    function getThreshold() external view returns (uint256);\\n\\n    function getStorageAt(\\n        uint256 offset,\\n        uint256 length\\n    ) external view returns (bytes memory);\\n\\n    function nonce() external view returns (uint256);\\n\\n    function getModulesPaginated(\\n        address start,\\n        uint256 pageSize\\n    ) external view returns (address[] memory array, address next);\\n\\n    function getModules() external view returns (address[] memory);\\n}\\n\\n/// @title Safe Configuration Fetcher\\n/// @notice A utility contract to fetch basic and full configurations of a Safe.\\n/// @dev Provides gas-optimized methods for reading storage and modules with pagination.\\ncontract SafeConfigurationFetcher {\\n    /// @dev Storage slot for singleton\\n    bytes32 internal constant SINGLETON_STORAGE_SLOT = 0;\\n\\n    /// @dev Storage slot for fallback handler (keccak256(\\\"fallback_manager.handler.address\\\")).\\n    bytes32 internal constant FALLBACK_HANDLER_STORAGE_SLOT =\\n        0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5;\\n\\n    /// @dev Storage slot for guard contract (keccak256(\\\"guard_manager.guard.address\\\")).\\n    bytes32 internal constant GUARD_STORAGE_SLOT =\\n        0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;\\n\\n    /// @dev Sentinel address for module linked-list iteration.\\n    address internal constant SENTINEL_MODULES = address(0x1);\\n\\n    /// @dev Internal helper to read an address from a specific storage slot.\\n    /// @param safeContract The Safe contract to query.\\n    /// @param slot The storage slot to read.\\n    /// @return addr The address value decoded from the slot.\\n    function _addressFromStorage(\\n        ISafe safeContract,\\n        bytes32 slot\\n    ) internal view returns (address addr) {\\n        addr = abi.decode(\\n            safeContract.getStorageAt(uint256(slot), 1),\\n            (address)\\n        );\\n    }\\n\\n    /// @dev Internal helper to fetch the basic configuration fields from the Safe.\\n    /// @param safeContract The Safe contract instance.\\n    /// @return config SafeConfiguration struct with owners, threshold, fallbackHandler, nonce, and guard populated.\\n    function _fetchBasicConfig(\\n        ISafe safeContract\\n    ) private view returns (SafeConfiguration memory config) {\\n        config.singleton = _addressFromStorage(\\n            safeContract,\\n            SINGLETON_STORAGE_SLOT\\n        );\\n        config.owners = safeContract.getOwners();\\n        config.threshold = safeContract.getThreshold();\\n        config.fallbackHandler = _addressFromStorage(\\n            safeContract,\\n            FALLBACK_HANDLER_STORAGE_SLOT\\n        );\\n        config.nonce = safeContract.nonce();\\n        config.guard = _addressFromStorage(safeContract, GUARD_STORAGE_SLOT);\\n    }\\n\\n    /// @notice Returns the basic Safe configuration (excluding modules, modules array will be empty).\\n    /// @param safe The address of the Safe contract.\\n    /// @return config The basic SafeConfiguration with owners, threshold, fallbackHandler, nonce, guard, and an empty modules array.\\n    function getBasicConfiguration(\\n        address safe\\n    ) external view returns (SafeConfiguration memory config) {\\n        config = _fetchBasicConfig(ISafe(safe));\\n    }\\n\\n    /// @notice Returns a page of Safe modules and the next cursor for pagination.\\n    /// @param safe The address of the Safe contract.\\n    /// @param start The starting module address (use SENTINEL_MODULES for first page).\\n    /// @param pageSize The maximum number of modules to retrieve.\\n    /// @return modulePage List of module addresses in the retrieved page.\\n    /// @return nextCursor Address cursor for the next page (address(0) if end reached).\\n    function getModulesPaginated(\\n        address safe,\\n        address start,\\n        uint256 pageSize\\n    ) external view returns (address[] memory modulePage, address nextCursor) {\\n        (modulePage, nextCursor) = ISafe(safe).getModulesPaginated(\\n            start,\\n            pageSize\\n        );\\n    }\\n\\n    /// @notice Returns the full Safe configuration, including all modules up to the specified cap.\\n    /// @param safe The address of the Safe contract.\\n    /// @param maxIterations Maximum number of pagination loops.\\n    /// @param pageSize Number of modules to fetch per iteration.\\n    /// @return fullConfig Complete SafeConfiguration with modules populated.\\n    /// @return nextCursor Cursor for additional pagination (address(0) if none left).\\n    function getFullConfiguration(\\n        address safe,\\n        uint256 maxIterations,\\n        uint256 pageSize\\n    )\\n        public\\n        view\\n        returns (SafeConfiguration memory fullConfig, address nextCursor)\\n    {\\n        ISafe safeContract = ISafe(safe);\\n        fullConfig = _fetchBasicConfig(safeContract);\\n\\n        uint256 bufferSize = maxIterations * pageSize;\\n        address[] memory temp = new address[](bufferSize);\\n        uint256 count = 0;\\n        address cursor = SENTINEL_MODULES;\\n\\n        for (\\n            uint256 i = 0;\\n            i < maxIterations &&\\n                (i == 0 ||\\n                    (cursor != address(0) && cursor != SENTINEL_MODULES));\\n            i++\\n        ) {\\n            (address[] memory page, address next) = safeContract\\n                .getModulesPaginated(cursor, pageSize);\\n            for (uint256 j = 0; j < page.length; j++) {\\n                temp[count++] = page[j];\\n            }\\n            cursor = next;\\n        }\\n\\n        address[] memory modulesArr = new address[](count);\\n        for (uint256 k = 0; k < count; k++) {\\n            modulesArr[k] = temp[k];\\n        }\\n        fullConfig.modules = modulesArr;\\n        nextCursor = cursor;\\n    }\\n\\n    /// @notice Returns full configurations for multiple Safe contracts in a single call.\\n    /// @param safes Array of Safe contract addresses to query.\\n    /// @param maxIterations Maximum number of pagination loops for each Safe.\\n    /// @param pageSize Number of modules to fetch per iteration for each Safe.\\n    /// @return fullConfigs Array of complete SafeConfiguration structs, one for each Safe address.\\n    /// @return nextCursors Array of cursors for additional pagination (address(0) if none left).\\n    function getFullConfigurationMany(\\n        address[] calldata safes,\\n        uint256 maxIterations,\\n        uint256 pageSize\\n    )\\n        external\\n        view\\n        returns (\\n            SafeConfiguration[] memory fullConfigs,\\n            address[] memory nextCursors\\n        )\\n    {\\n        fullConfigs = new SafeConfiguration[](safes.length);\\n        nextCursors = new address[](safes.length);\\n\\n        for (uint256 i = 0; i < safes.length; i++) {\\n            (fullConfigs[i], nextCursors[i]) = getFullConfiguration(\\n                safes[i],\\n                maxIterations,\\n                pageSize\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xedb55b4586866ee0ad0e49922df992dab7dcf8950cbd57df99ab887cd04aade1\",\"license\":\"GNU GPLv3\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c9081632fe699bd1461033e575080636287c4c61461014757806394de1ba5146100ce5763aa83207f1461004b57600080fd5b346100c95760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100c9576100be610095610088610459565b60443590602435906107d0565b73ffffffffffffffffffffffffffffffffffffffff6040519384936040855260408501906104c6565b911660208301520390f35b600080fd5b346100c95760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100c95761014361012f73ffffffffffffffffffffffffffffffffffffffff610120610459565b610128610698565b50166109c7565b6040519182916020835260208301906104c6565b0390f35b346100c95760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100c95760043567ffffffffffffffff81116100c957366023820112156100c957806004013567ffffffffffffffff81116100c9573660248260051b840101116100c957602435916044356101c6836105c1565b936101d46040519586610551565b8385527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610201856105c1565b0160005b818110610327575050610217846106e2565b9260005b8581101561029357600060248260051b840101359073ffffffffffffffffffffffffffffffffffffffff8216820361029057509061025c85856001946107d0565b73ffffffffffffffffffffffffffffffffffffffff61027b848a610731565b91169052610289828a610731565b520161021b565b80fd5b8685604051809260408201926040835281518094526060830193602060608260051b8601019301946000905b8282106102da5785806101438787838203602085015261047c565b91936020610315827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0600195979984950301865289516104c6565b970192019201869492959391956102bf565b602090610332610698565b82828a01015201610205565b346100c95760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100c957610375610459565b60243573ffffffffffffffffffffffffffffffffffffffff811681036100c9577fcc2f845200000000000000000000000000000000000000000000000000000000835273ffffffffffffffffffffffffffffffffffffffff908116600484015260448035602485015260009284928391165afa90811561044d576100be91600091600091610428575b5073ffffffffffffffffffffffffffffffffffffffff60405193849360408552604085019061047c565b905061044791503d806000833e61043f8183610551565b81019061065f565b836103fe565b6040513d6000823e3d90fd5b6004359073ffffffffffffffffffffffffffffffffffffffff821682036100c957565b906020808351928381520192019060005b81811061049a5750505090565b825173ffffffffffffffffffffffffffffffffffffffff1684526020938401939092019160010161048d565b9073ffffffffffffffffffffffffffffffffffffffff825116815260c073ffffffffffffffffffffffffffffffffffffffff81610547610515602087015160e0602088015260e087019061047c565b604087015160408701528360608801511660608701526080870151608087015260a087015186820360a088015261047c565b9401511691015290565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761059257604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff81116105925760051b60200190565b519073ffffffffffffffffffffffffffffffffffffffff821682036100c957565b9080601f830112156100c9578151610611816105c1565b9261061f6040519485610551565b81845260208085019260051b8201019283116100c957602001905b8282106106475750505090565b60208091610654846105d9565b81520191019061063a565b91906040838203126100c95782519067ffffffffffffffff82116100c95761068e6020916106959386016105fa565b93016105d9565b90565b6040519060e0820182811067ffffffffffffffff82111761059257604052600060c08382815260606020820152826040820152826060820152826080820152606060a08201520152565b906106ec826105c1565b6106f96040519182610551565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061072782946105c1565b0190602036910137565b80518210156107455760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146107a15760010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff90939192936107f2610698565b5016926107fe846109c7565b938184028481048314851517156107a15761081d9095939291956106e2565b9160009460019286935b8285108061098b575b1561092f576040517fcc2f845200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91909116600482015260248101829052969795969495600086604481845afa97881561044d57600096879961090e575b5060005b8a88518210156108ee57906001916108e76108e073ffffffffffffffffffffffffffffffffffffffff6108d7858e610731565b5116929e610774565b9d8c610731565b52016108a4565b5050929761090191959492965093610774565b9397969195949092610827565b90985061092591963d8091833e61043f8183610551565b95909597386108a0565b9597505050939050610940816106e2565b9160005b8281106109565750505060a084015290565b8073ffffffffffffffffffffffffffffffffffffffff61097860019385610731565b51166109848287610731565b5201610944565b50841580610830575073ffffffffffffffffffffffffffffffffffffffff811680151590816109bb575b50610830565b600191501415386109b5565b906109d0610698565b9173ffffffffffffffffffffffffffffffffffffffff60009116906040517f5624b25b000000000000000000000000000000000000000000000000000000008152816004820152600160248201528181604481865afa908115610d78578291610eeb575b50602081805181010312610c7c57602001519073ffffffffffffffffffffffffffffffffffffffff8216809203610290575083526040517fa0e67e2b000000000000000000000000000000000000000000000000000000008152600081600481855afa90811561044d57600091610eaa575b5060208401526040517fe75235b8000000000000000000000000000000000000000000000000000000008152602081600481855afa90811561044d57600091610e78575b50604084015260006040517f5624b25b0000000000000000000000000000000000000000000000000000000081527f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d56004820152600160248201528181604481865afa908115610d78578291610db5575b50602081805181010312610c7c57602001519073ffffffffffffffffffffffffffffffffffffffff8216809203610290575060608401526040517faffed0e0000000000000000000000000000000000000000000000000000000008152602081600481855afa90811561044d57600091610d83575b506080840152604460008092604051928380927f5624b25b0000000000000000000000000000000000000000000000000000000082527f4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c86004830152600160248301525afa908115610d78578291610c80575b50602081805181010312610c7c57602001519073ffffffffffffffffffffffffffffffffffffffff8216809203610290575060c0830152565b5080fd5b90503d8083833e610c918183610551565b810190602081830312610d745780519067ffffffffffffffff8211610d43570181601f82011215610d745780519067ffffffffffffffff8211610d475760405192610d0460207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8601160185610551565b82845260208383010111610d4357908391825b828110610d2c57505082016020015238610c43565b602082820181015186830182015286945001610d17565b8380fd5b6024847f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b8280fd5b6040513d84823e3d90fd5b90506020813d602011610dad575b81610d9e60209383610551565b810103126100c9575138610bd0565b3d9150610d91565b90503d8083833e610dc68183610551565b810190602081830312610d745780519067ffffffffffffffff8211610d43570181601f82011215610d745780519067ffffffffffffffff8211610d475760405192610e3960207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8601160185610551565b82845260208383010111610d4357908391825b828110610e6157505082016020015238610b5b565b602082820181015186830182015286945001610e4c565b90506020813d602011610ea2575b81610e9360209383610551565b810103126100c9575138610aea565b3d9150610e86565b903d8082843e610eba8184610551565b820191602081840312610c7c5780519167ffffffffffffffff83116102905750610ee59291016105fa565b38610aa6565b90503d8083833e610efc8183610551565b810190602081830312610d745780519067ffffffffffffffff8211610d43570181601f82011215610d745780519067ffffffffffffffff8211610d475760405192610f6f60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8601160185610551565b82845260208383010111610d4357908391825b828110610f9757505082016020015238610a34565b602082820181015186830182015286945001610f8256fea26469706673582212204592b82bd4656f8e470c93e6c10e785a2dbfba1cabfbb5b1c7a166091623a59a64736f6c634300081d0033",
  "devdoc": {
    "details": "Provides gas-optimized methods for reading storage and modules with pagination.",
    "kind": "dev",
    "methods": {
      "getBasicConfiguration(address)": {
        "params": {
          "safe": "The address of the Safe contract."
        },
        "returns": {
          "config": "The basic SafeConfiguration with owners, threshold, fallbackHandler, nonce, guard, and an empty modules array."
        }
      },
      "getFullConfiguration(address,uint256,uint256)": {
        "params": {
          "maxIterations": "Maximum number of pagination loops.",
          "pageSize": "Number of modules to fetch per iteration.",
          "safe": "The address of the Safe contract."
        },
        "returns": {
          "fullConfig": "Complete SafeConfiguration with modules populated.",
          "nextCursor": "Cursor for additional pagination (address(0) if none left)."
        }
      },
      "getFullConfigurationMany(address[],uint256,uint256)": {
        "params": {
          "maxIterations": "Maximum number of pagination loops for each Safe.",
          "pageSize": "Number of modules to fetch per iteration for each Safe.",
          "safes": "Array of Safe contract addresses to query."
        },
        "returns": {
          "fullConfigs": "Array of complete SafeConfiguration structs, one for each Safe address.",
          "nextCursors": "Array of cursors for additional pagination (address(0) if none left)."
        }
      },
      "getModulesPaginated(address,address,uint256)": {
        "params": {
          "pageSize": "The maximum number of modules to retrieve.",
          "safe": "The address of the Safe contract.",
          "start": "The starting module address (use SENTINEL_MODULES for first page)."
        },
        "returns": {
          "modulePage": "List of module addresses in the retrieved page.",
          "nextCursor": "Address cursor for the next page (address(0) if end reached)."
        }
      }
    },
    "stateVariables": {
      "FALLBACK_HANDLER_STORAGE_SLOT": {
        "details": "Storage slot for fallback handler (keccak256(\"fallback_manager.handler.address\"))."
      },
      "GUARD_STORAGE_SLOT": {
        "details": "Storage slot for guard contract (keccak256(\"guard_manager.guard.address\"))."
      },
      "SENTINEL_MODULES": {
        "details": "Sentinel address for module linked-list iteration."
      },
      "SINGLETON_STORAGE_SLOT": {
        "details": "Storage slot for singleton"
      }
    },
    "title": "Safe Configuration Fetcher",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getBasicConfiguration(address)": {
        "notice": "Returns the basic Safe configuration (excluding modules, modules array will be empty)."
      },
      "getFullConfiguration(address,uint256,uint256)": {
        "notice": "Returns the full Safe configuration, including all modules up to the specified cap."
      },
      "getFullConfigurationMany(address[],uint256,uint256)": {
        "notice": "Returns full configurations for multiple Safe contracts in a single call."
      },
      "getModulesPaginated(address,address,uint256)": {
        "notice": "Returns a page of Safe modules and the next cursor for pagination."
      }
    },
    "notice": "A utility contract to fetch basic and full configurations of a Safe.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}