{
  "address": "0x9D7F213D9fF14F1a9286aE8A19fE744dfE840699",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "safe",
          "type": "address"
        }
      ],
      "name": "getBasicConfiguration",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "singleton",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "owners",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "threshold",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "fallbackHandler",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "modules",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "guard",
              "type": "address"
            }
          ],
          "internalType": "struct SafeConfiguration",
          "name": "config",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "safe",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxIterations",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pageSize",
          "type": "uint256"
        }
      ],
      "name": "getFullConfiguration",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "singleton",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "owners",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "threshold",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "fallbackHandler",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "modules",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "guard",
              "type": "address"
            }
          ],
          "internalType": "struct SafeConfiguration",
          "name": "fullConfig",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "nextCursor",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "safe",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "start",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pageSize",
          "type": "uint256"
        }
      ],
      "name": "getModulesPaginated",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "modulePage",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "nextCursor",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4ca810f0ca758c784281312d479a699fc2b8784abd99499cfbd32043a356e319",
  "receipt": {
    "to": "0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7",
    "from": "0x02270bd144e70cE6963bA02F575776A16184E1E6",
    "contractAddress": null,
    "transactionIndex": 9,
    "gasUsed": "827767",
    "logsBloom": "0x
    "blockHash": "0x01a23484e74bcfb5b38cd0e968436c01f03d9363cfa8f7f0fc514b9276d35084",
    "transactionHash": "0x4ca810f0ca758c784281312d479a699fc2b8784abd99499cfbd32043a356e319",
    "logs": [],
    "blockNumber": 39941769,
    "cumulativeGasUsed": "2589244",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "322e5cb496943b2758c8098bb90568b4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.29+commit.ab55807c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"}],\"name\":\"getBasicConfiguration\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"singleton\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fallbackHandler\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"modules\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"}],\"internalType\":\"struct SafeConfiguration\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxIterations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"getFullConfiguration\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"singleton\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fallbackHandler\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"modules\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"}],\"internalType\":\"struct SafeConfiguration\",\"name\":\"fullConfig\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"nextCursor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"start\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"getModulesPaginated\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"modulePage\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"nextCursor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Provides gas-optimized methods for reading storage and modules with pagination.\",\"kind\":\"dev\",\"methods\":{\"getBasicConfiguration(address)\":{\"params\":{\"safe\":\"The address of the Safe contract.\"},\"returns\":{\"config\":\"The basic SafeConfiguration with owners, threshold, fallbackHandler, nonce, guard, and an empty modules array.\"}},\"getFullConfiguration(address,uint256,uint256)\":{\"params\":{\"maxIterations\":\"Maximum number of pagination loops.\",\"pageSize\":\"Number of modules to fetch per iteration.\",\"safe\":\"The address of the Safe contract.\"},\"returns\":{\"fullConfig\":\"Complete SafeConfiguration with modules populated.\",\"nextCursor\":\"Cursor for additional pagination (address(0) if none left).\"}},\"getModulesPaginated(address,address,uint256)\":{\"params\":{\"pageSize\":\"The maximum number of modules to retrieve.\",\"safe\":\"The address of the Safe contract.\",\"start\":\"The starting module address (use SENTINEL_MODULES for first page).\"},\"returns\":{\"modulePage\":\"List of module addresses in the retrieved page.\",\"nextCursor\":\"Address cursor for the next page (address(0) if end reached).\"}}},\"stateVariables\":{\"FALLBACK_HANDLER_STORAGE_SLOT\":{\"details\":\"Storage slot for fallback handler (keccak256(\\\"fallback_manager.handler.address\\\")).\"},\"GUARD_STORAGE_SLOT\":{\"details\":\"Storage slot for guard contract (keccak256(\\\"guard_manager.guard.address\\\")).\"},\"SENTINEL_MODULES\":{\"details\":\"Sentinel address for module linked-list iteration.\"},\"SINGLETON_STORAGE_SLOT\":{\"details\":\"Storage slot for singleton\"}},\"title\":\"Safe Configuration Fetcher\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getBasicConfiguration(address)\":{\"notice\":\"Returns the basic Safe configuration (excluding modules, modules array will be empty).\"},\"getFullConfiguration(address,uint256,uint256)\":{\"notice\":\"Returns the full Safe configuration, including all modules up to the specified cap.\"},\"getModulesPaginated(address,address,uint256)\":{\"notice\":\"Returns a page of Safe modules and the next cursor for pagination.\"}},\"notice\":\"A utility contract to fetch basic and full configurations of a Safe.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/utils/SafeConfigurationFetcher.sol\":\"SafeConfigurationFetcher\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"src/utils/SafeConfigurationFetcher.sol\":{\"content\":\"// SPDX-License-Identifier: GNU GPLv3\\npragma solidity ^0.8.29;\\n\\n/// @notice Data structure representing a Safe configuration.\\n/// @param owners The list of Safe owners.\\n/// @param threshold Required confirmations for transactions.\\n/// @param fallbackHandler Fallback handler contract address.\\n/// @param nonce Current nonce of the Safe.\\n/// @param modules Enabled Safe modules.\\n/// @param guard Guard contract address.\\nstruct SafeConfiguration {\\n    address singleton;\\n    address[] owners;\\n    uint256 threshold;\\n    address fallbackHandler;\\n    uint256 nonce;\\n    address[] modules;\\n    address guard;\\n}\\n\\ninterface ISafe {\\n    function getOwners() external view returns (address[] memory);\\n    function getThreshold() external view returns (uint256);\\n    function getStorageAt(\\n        uint256 offset,\\n        uint256 length\\n    ) external view returns (bytes memory);\\n    function nonce() external view returns (uint256);\\n    function getModulesPaginated(\\n        address start,\\n        uint256 pageSize\\n    ) external view returns (address[] memory array, address next);\\n\\n    function getModules() external view returns (address[] memory);\\n}\\n\\n/// @title Safe Configuration Fetcher\\n/// @notice A utility contract to fetch basic and full configurations of a Safe.\\n/// @dev Provides gas-optimized methods for reading storage and modules with pagination.\\ncontract SafeConfigurationFetcher {\\n    /// @dev Storage slot for singleton\\n    bytes32 internal constant SINGLETON_STORAGE_SLOT = 0;\\n\\n    /// @dev Storage slot for fallback handler (keccak256(\\\"fallback_manager.handler.address\\\")).\\n    bytes32 internal constant FALLBACK_HANDLER_STORAGE_SLOT =\\n        0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5;\\n\\n    /// @dev Storage slot for guard contract (keccak256(\\\"guard_manager.guard.address\\\")).\\n    bytes32 internal constant GUARD_STORAGE_SLOT =\\n        0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;\\n\\n    /// @dev Sentinel address for module linked-list iteration.\\n    address internal constant SENTINEL_MODULES = address(0x1);\\n\\n    /// @dev Internal helper to read an address from a specific storage slot.\\n    /// @param safeContract The Safe contract to query.\\n    /// @param slot The storage slot to read.\\n    /// @return addr The address value decoded from the slot.\\n    function _addressFromStorage(\\n        ISafe safeContract,\\n        bytes32 slot\\n    ) internal view returns (address addr) {\\n        addr = abi.decode(\\n            safeContract.getStorageAt(uint256(slot), 1),\\n            (address)\\n        );\\n    }\\n\\n    /// @dev Internal helper to fetch the basic configuration fields from the Safe.\\n    /// @param safeContract The Safe contract instance.\\n    /// @return config SafeConfiguration struct with owners, threshold, fallbackHandler, nonce, and guard populated.\\n    function _fetchBasicConfig(\\n        ISafe safeContract\\n    ) private view returns (SafeConfiguration memory config) {\\n        config.singleton = _addressFromStorage(\\n            safeContract,\\n            SINGLETON_STORAGE_SLOT\\n        );\\n        config.owners = safeContract.getOwners();\\n        config.threshold = safeContract.getThreshold();\\n        config.fallbackHandler = _addressFromStorage(\\n            safeContract,\\n            FALLBACK_HANDLER_STORAGE_SLOT\\n        );\\n        config.nonce = safeContract.nonce();\\n        config.guard = _addressFromStorage(safeContract, GUARD_STORAGE_SLOT);\\n    }\\n\\n    /// @notice Returns the basic Safe configuration (excluding modules, modules array will be empty).\\n    /// @param safe The address of the Safe contract.\\n    /// @return config The basic SafeConfiguration with owners, threshold, fallbackHandler, nonce, guard, and an empty modules array.\\n    function getBasicConfiguration(\\n        address safe\\n    ) external view returns (SafeConfiguration memory config) {\\n        config = _fetchBasicConfig(ISafe(safe));\\n    }\\n\\n    /// @notice Returns a page of Safe modules and the next cursor for pagination.\\n    /// @param safe The address of the Safe contract.\\n    /// @param start The starting module address (use SENTINEL_MODULES for first page).\\n    /// @param pageSize The maximum number of modules to retrieve.\\n    /// @return modulePage List of module addresses in the retrieved page.\\n    /// @return nextCursor Address cursor for the next page (address(0) if end reached).\\n    function getModulesPaginated(\\n        address safe,\\n        address start,\\n        uint256 pageSize\\n    ) external view returns (address[] memory modulePage, address nextCursor) {\\n        (modulePage, nextCursor) = ISafe(safe).getModulesPaginated(\\n            start,\\n            pageSize\\n        );\\n    }\\n\\n    /// @notice Returns the full Safe configuration, including all modules up to the specified cap.\\n    /// @param safe The address of the Safe contract.\\n    /// @param maxIterations Maximum number of pagination loops.\\n    /// @param pageSize Number of modules to fetch per iteration.\\n    /// @return fullConfig Complete SafeConfiguration with modules populated.\\n    /// @return nextCursor Cursor for additional pagination (address(0) if none left).\\n    function getFullConfiguration(\\n        address safe,\\n        uint256 maxIterations,\\n        uint256 pageSize\\n    )\\n        external\\n        view\\n        returns (SafeConfiguration memory fullConfig, address nextCursor)\\n    {\\n        ISafe safeContract = ISafe(safe);\\n        fullConfig = _fetchBasicConfig(safeContract);\\n\\n        uint256 bufferSize = maxIterations * pageSize;\\n        address[] memory temp = new address[](bufferSize);\\n        uint256 count = 0;\\n        address cursor = SENTINEL_MODULES;\\n\\n        for (\\n            uint256 i = 0;\\n            i < maxIterations &&\\n                (cursor != address(0) && cursor != SENTINEL_MODULES);\\n            i++\\n        ) {\\n            (address[] memory page, address next) = safeContract\\n                .getModulesPaginated(cursor, pageSize);\\n            for (uint256 j = 0; j < page.length; j++) {\\n                temp[count++] = page[j];\\n            }\\n            cursor = next;\\n        }\\n\\n        address[] memory modulesArr = new address[](count);\\n        for (uint256 k = 0; k < count; k++) {\\n            modulesArr[k] = temp[k];\\n        }\\n        fullConfig.modules = modulesArr;\\n        nextCursor = cursor;\\n    }\\n}\\n\",\"keccak256\":\"0xbb9e94779c4a23e8f5ba3b50031da9a75dd53f7f86e47ba916f37f970469748b\",\"license\":\"GNU GPLv3\"}},\"version\":1}",
  "bytecode": "0x60808060405234601557610e0a908161001b8239f35b600080fdfe608080604052600436101561001357600080fd5b60003560e01c9081632fe699bd146103535750806394de1ba5146102da5763aa83207f1461004057600080fd5b346102d55760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102d5576100776104a2565b60243573ffffffffffffffffffffffffffffffffffffffff6044359261009b6106e1565b50166100a6816107ea565b928083028381048214841517156102a6576100c39094939461072b565b9060009360019585925b81841080610272575b156101e5576040517fcc2f845200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff98909816600489015260248801819052959694959394936000856044818a5afa9687156101d95760009586986101b0575b5060005b8651811015610192578073ffffffffffffffffffffffffffffffffffffffff6101766001938a6107a7565b511661018b6101848d61077a565b9c8b6107a7565b520161014b565b50939291966101a39195509261077a565b92949396959091966100cd565b9097506101cf91953d8091833e6101c7818361059a565b8101906106a8565b9490949638610147565b6040513d6000823e3d90fd5b848389896101f28161072b565b9060005b81811061023d575050610232935060a083015273ffffffffffffffffffffffffffffffffffffffff60405193849360408552604085019061050f565b911660208301520390f35b8073ffffffffffffffffffffffffffffffffffffffff61025f600193896107a7565b511661026b82866107a7565b52016101f6565b5073ffffffffffffffffffffffffffffffffffffffff8816801515908161029a575b506100d6565b60019150141538610294565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b346102d55760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102d55761034f61033b73ffffffffffffffffffffffffffffffffffffffff61032c6104a2565b6103346106e1565b50166107ea565b60405191829160208352602083019061050f565b0390f35b346102d55760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102d55761038a6104a2565b60243573ffffffffffffffffffffffffffffffffffffffff811681036102d5577fcc2f845200000000000000000000000000000000000000000000000000000000835273ffffffffffffffffffffffffffffffffffffffff908116600484015260448035602485015260009284928391165afa9081156101d957600090600092610484575b50604051906040820160408352815180915260206060840192019060005b8181106104585750505073ffffffffffffffffffffffffffffffffffffffff82931660208301520390f35b825173ffffffffffffffffffffffffffffffffffffffff1684526020938401939092019160010161042d565b905061049b91503d806000833e6101c7818361059a565b908261040f565b6004359073ffffffffffffffffffffffffffffffffffffffff821682036102d557565b906020808351928381520192019060005b8181106104e35750505090565b825173ffffffffffffffffffffffffffffffffffffffff168452602093840193909201916001016104d6565b9073ffffffffffffffffffffffffffffffffffffffff825116815260c073ffffffffffffffffffffffffffffffffffffffff8161059061055e602087015160e0602088015260e08701906104c5565b604087015160408701528360608801511660608701526080870151608087015260a087015186820360a08801526104c5565b9401511691015290565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176105db57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff81116105db5760051b60200190565b519073ffffffffffffffffffffffffffffffffffffffff821682036102d557565b9080601f830112156102d557815161065a8161060a565b92610668604051948561059a565b81845260208085019260051b8201019283116102d557602001905b8282106106905750505090565b6020809161069d84610622565b815201910190610683565b91906040838203126102d55782519067ffffffffffffffff82116102d5576106d76020916106de938601610643565b9301610622565b90565b6040519060e0820182811067ffffffffffffffff8211176105db57604052600060c08382815260606020820152826040820152826060820152826080820152606060a08201520152565b906107358261060a565b610742604051918261059a565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610770829461060a565b0190602036910137565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146102a65760010190565b80518210156107bb5760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906107f36106e1565b9173ffffffffffffffffffffffffffffffffffffffff60009116906040517f5624b25b000000000000000000000000000000000000000000000000000000008152816004820152600160248201528181604481865afa908115610b9e578291610d11575b50602081805181010312610aa257602001519073ffffffffffffffffffffffffffffffffffffffff8216809203610a9f575083526040517fa0e67e2b000000000000000000000000000000000000000000000000000000008152600081600481855afa9081156101d957600091610cd0575b5060208401526040517fe75235b8000000000000000000000000000000000000000000000000000000008152602081600481855afa9081156101d957600091610c9e575b50604084015260006040517f5624b25b0000000000000000000000000000000000000000000000000000000081527f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d56004820152600160248201528181604481865afa908115610b9e578291610bdb575b50602081805181010312610aa257602001519073ffffffffffffffffffffffffffffffffffffffff8216809203610a9f575060608401526040517faffed0e0000000000000000000000000000000000000000000000000000000008152602081600481855afa9081156101d957600091610ba9575b506080840152604460008092604051928380927f5624b25b0000000000000000000000000000000000000000000000000000000082527f4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c86004830152600160248301525afa908115610b9e578291610aa6575b50602081805181010312610aa257602001519073ffffffffffffffffffffffffffffffffffffffff8216809203610a9f575060c0830152565b80fd5b5080fd5b90503d8083833e610ab7818361059a565b810190602081830312610b9a5780519067ffffffffffffffff8211610b69570181601f82011215610b9a5780519067ffffffffffffffff8211610b6d5760405192610b2a60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f860116018561059a565b82845260208383010111610b6957908391825b828110610b5257505082016020015238610a66565b602082820181015186830182015286945001610b3d565b8380fd5b6024847f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b8280fd5b6040513d84823e3d90fd5b90506020813d602011610bd3575b81610bc46020938361059a565b810103126102d55751386109f3565b3d9150610bb7565b90503d8083833e610bec818361059a565b810190602081830312610b9a5780519067ffffffffffffffff8211610b69570181601f82011215610b9a5780519067ffffffffffffffff8211610b6d5760405192610c5f60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f860116018561059a565b82845260208383010111610b6957908391825b828110610c875750508201602001523861097e565b602082820181015186830182015286945001610c72565b90506020813d602011610cc8575b81610cb96020938361059a565b810103126102d557513861090d565b3d9150610cac565b903d8082843e610ce0818461059a565b820191602081840312610aa25780519167ffffffffffffffff8311610a9f5750610d0b929101610643565b386108c9565b90503d8083833e610d22818361059a565b810190602081830312610b9a5780519067ffffffffffffffff8211610b69570181601f82011215610b9a5780519067ffffffffffffffff8211610b6d5760405192610d9560207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f860116018561059a565b82845260208383010111610b6957908391825b828110610dbd57505082016020015238610857565b602082820181015186830182015286945001610da856fea26469706673582212207e492ed3ad27bb2f9b23996e41b31a755cd97c3baceb98538bdad23d1e5186e964736f6c634300081d0033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c9081632fe699bd146103535750806394de1ba5146102da5763aa83207f1461004057600080fd5b346102d55760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102d5576100776104a2565b60243573ffffffffffffffffffffffffffffffffffffffff6044359261009b6106e1565b50166100a6816107ea565b928083028381048214841517156102a6576100c39094939461072b565b9060009360019585925b81841080610272575b156101e5576040517fcc2f845200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff98909816600489015260248801819052959694959394936000856044818a5afa9687156101d95760009586986101b0575b5060005b8651811015610192578073ffffffffffffffffffffffffffffffffffffffff6101766001938a6107a7565b511661018b6101848d61077a565b9c8b6107a7565b520161014b565b50939291966101a39195509261077a565b92949396959091966100cd565b9097506101cf91953d8091833e6101c7818361059a565b8101906106a8565b9490949638610147565b6040513d6000823e3d90fd5b848389896101f28161072b565b9060005b81811061023d575050610232935060a083015273ffffffffffffffffffffffffffffffffffffffff60405193849360408552604085019061050f565b911660208301520390f35b8073ffffffffffffffffffffffffffffffffffffffff61025f600193896107a7565b511661026b82866107a7565b52016101f6565b5073ffffffffffffffffffffffffffffffffffffffff8816801515908161029a575b506100d6565b60019150141538610294565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b346102d55760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102d55761034f61033b73ffffffffffffffffffffffffffffffffffffffff61032c6104a2565b6103346106e1565b50166107ea565b60405191829160208352602083019061050f565b0390f35b346102d55760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102d55761038a6104a2565b60243573ffffffffffffffffffffffffffffffffffffffff811681036102d5577fcc2f845200000000000000000000000000000000000000000000000000000000835273ffffffffffffffffffffffffffffffffffffffff908116600484015260448035602485015260009284928391165afa9081156101d957600090600092610484575b50604051906040820160408352815180915260206060840192019060005b8181106104585750505073ffffffffffffffffffffffffffffffffffffffff82931660208301520390f35b825173ffffffffffffffffffffffffffffffffffffffff1684526020938401939092019160010161042d565b905061049b91503d806000833e6101c7818361059a565b908261040f565b6004359073ffffffffffffffffffffffffffffffffffffffff821682036102d557565b906020808351928381520192019060005b8181106104e35750505090565b825173ffffffffffffffffffffffffffffffffffffffff168452602093840193909201916001016104d6565b9073ffffffffffffffffffffffffffffffffffffffff825116815260c073ffffffffffffffffffffffffffffffffffffffff8161059061055e602087015160e0602088015260e08701906104c5565b604087015160408701528360608801511660608701526080870151608087015260a087015186820360a08801526104c5565b9401511691015290565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176105db57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff81116105db5760051b60200190565b519073ffffffffffffffffffffffffffffffffffffffff821682036102d557565b9080601f830112156102d557815161065a8161060a565b92610668604051948561059a565b81845260208085019260051b8201019283116102d557602001905b8282106106905750505090565b6020809161069d84610622565b815201910190610683565b91906040838203126102d55782519067ffffffffffffffff82116102d5576106d76020916106de938601610643565b9301610622565b90565b6040519060e0820182811067ffffffffffffffff8211176105db57604052600060c08382815260606020820152826040820152826060820152826080820152606060a08201520152565b906107358261060a565b610742604051918261059a565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610770829461060a565b0190602036910137565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146102a65760010190565b80518210156107bb5760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906107f36106e1565b9173ffffffffffffffffffffffffffffffffffffffff60009116906040517f5624b25b000000000000000000000000000000000000000000000000000000008152816004820152600160248201528181604481865afa908115610b9e578291610d11575b50602081805181010312610aa257602001519073ffffffffffffffffffffffffffffffffffffffff8216809203610a9f575083526040517fa0e67e2b000000000000000000000000000000000000000000000000000000008152600081600481855afa9081156101d957600091610cd0575b5060208401526040517fe75235b8000000000000000000000000000000000000000000000000000000008152602081600481855afa9081156101d957600091610c9e575b50604084015260006040517f5624b25b0000000000000000000000000000000000000000000000000000000081527f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d56004820152600160248201528181604481865afa908115610b9e578291610bdb575b50602081805181010312610aa257602001519073ffffffffffffffffffffffffffffffffffffffff8216809203610a9f575060608401526040517faffed0e0000000000000000000000000000000000000000000000000000000008152602081600481855afa9081156101d957600091610ba9575b506080840152604460008092604051928380927f5624b25b0000000000000000000000000000000000000000000000000000000082527f4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c86004830152600160248301525afa908115610b9e578291610aa6575b50602081805181010312610aa257602001519073ffffffffffffffffffffffffffffffffffffffff8216809203610a9f575060c0830152565b80fd5b5080fd5b90503d8083833e610ab7818361059a565b810190602081830312610b9a5780519067ffffffffffffffff8211610b69570181601f82011215610b9a5780519067ffffffffffffffff8211610b6d5760405192610b2a60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f860116018561059a565b82845260208383010111610b6957908391825b828110610b5257505082016020015238610a66565b602082820181015186830182015286945001610b3d565b8380fd5b6024847f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b8280fd5b6040513d84823e3d90fd5b90506020813d602011610bd3575b81610bc46020938361059a565b810103126102d55751386109f3565b3d9150610bb7565b90503d8083833e610bec818361059a565b810190602081830312610b9a5780519067ffffffffffffffff8211610b69570181601f82011215610b9a5780519067ffffffffffffffff8211610b6d5760405192610c5f60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f860116018561059a565b82845260208383010111610b6957908391825b828110610c875750508201602001523861097e565b602082820181015186830182015286945001610c72565b90506020813d602011610cc8575b81610cb96020938361059a565b810103126102d557513861090d565b3d9150610cac565b903d8082843e610ce0818461059a565b820191602081840312610aa25780519167ffffffffffffffff8311610a9f5750610d0b929101610643565b386108c9565b90503d8083833e610d22818361059a565b810190602081830312610b9a5780519067ffffffffffffffff8211610b69570181601f82011215610b9a5780519067ffffffffffffffff8211610b6d5760405192610d9560207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f860116018561059a565b82845260208383010111610b6957908391825b828110610dbd57505082016020015238610857565b602082820181015186830182015286945001610da856fea26469706673582212207e492ed3ad27bb2f9b23996e41b31a755cd97c3baceb98538bdad23d1e5186e964736f6c634300081d0033",
  "devdoc": {
    "details": "Provides gas-optimized methods for reading storage and modules with pagination.",
    "kind": "dev",
    "methods": {
      "getBasicConfiguration(address)": {
        "params": {
          "safe": "The address of the Safe contract."
        },
        "returns": {
          "config": "The basic SafeConfiguration with owners, threshold, fallbackHandler, nonce, guard, and an empty modules array."
        }
      },
      "getFullConfiguration(address,uint256,uint256)": {
        "params": {
          "maxIterations": "Maximum number of pagination loops.",
          "pageSize": "Number of modules to fetch per iteration.",
          "safe": "The address of the Safe contract."
        },
        "returns": {
          "fullConfig": "Complete SafeConfiguration with modules populated.",
          "nextCursor": "Cursor for additional pagination (address(0) if none left)."
        }
      },
      "getModulesPaginated(address,address,uint256)": {
        "params": {
          "pageSize": "The maximum number of modules to retrieve.",
          "safe": "The address of the Safe contract.",
          "start": "The starting module address (use SENTINEL_MODULES for first page)."
        },
        "returns": {
          "modulePage": "List of module addresses in the retrieved page.",
          "nextCursor": "Address cursor for the next page (address(0) if end reached)."
        }
      }
    },
    "stateVariables": {
      "FALLBACK_HANDLER_STORAGE_SLOT": {
        "details": "Storage slot for fallback handler (keccak256(\"fallback_manager.handler.address\"))."
      },
      "GUARD_STORAGE_SLOT": {
        "details": "Storage slot for guard contract (keccak256(\"guard_manager.guard.address\"))."
      },
      "SENTINEL_MODULES": {
        "details": "Sentinel address for module linked-list iteration."
      },
      "SINGLETON_STORAGE_SLOT": {
        "details": "Storage slot for singleton"
      }
    },
    "title": "Safe Configuration Fetcher",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getBasicConfiguration(address)": {
        "notice": "Returns the basic Safe configuration (excluding modules, modules array will be empty)."
      },
      "getFullConfiguration(address,uint256,uint256)": {
        "notice": "Returns the full Safe configuration, including all modules up to the specified cap."
      },
      "getModulesPaginated(address,address,uint256)": {
        "notice": "Returns a page of Safe modules and the next cursor for pagination."
      }
    },
    "notice": "A utility contract to fetch basic and full configurations of a Safe.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}